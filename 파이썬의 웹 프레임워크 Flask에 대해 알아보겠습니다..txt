파이썬의 웹 프레임워크 Flask에 대해 알아보겠습니다.

목차:

flask 소개
flask 구조
flask 라우팅
flask에서 html 반환
 

 

저에게 flask를 정의하라고 하면 다음과 같습니다.

flask는 간단하다. 자유롭다. 친절하다. 대신 너가 책임져야 할 것이 많다.

 

flask는 대표적인 마이크로 프레임워크답게 상당히 자유로운 코드 작성을 할 수 있으며, 무거운 프레임워크에서는 기본적으로 제공되는 기능이 없는 경우가 많지만 대신 각 모듈을 추가로 설치하는 식으로 확장할 수 있습니다.

https://flask.palletsprojects.com/en/2.3.x/quickstart/



flask 프로젝트는 기본적으로 다음 구조를 가지고 있습니다.

static 폴더
templates 폴더
app.py
app.py는 메인 코어를 담당합니다. templates는 flask 서버에서 사용할 html을 저장하는 디렉토리입니다. 마찬가지로 static은 css나 js 파일, 기타 사진 파일 등을 저장하는 디렉토리입니다.

특별히 설정을 해두지 않는다면, 사용자는 app.py에서 정의된 경로와 static 폴더 안에 파일에만 접근할 수 있습니다. 예를 들어 app.py에서 /index, /hello를 정의하고 실행코드가 있습니다. static에는 js.js와 css.css 파일이 있습니다. templates 폴더에는 good.html과 world.html이 있습니다. 그밖에 main.py라는 별도의 파이썬 파일이 있습니다. flask 서버가 실행될 때 사용자는 다음 경로에만 접근할 수 있습니다.

/index
/hello
/static/js.js
/static/css.css
다음 경로에는 접근할 수 없습니다.

/templates/good.html
/main.py
 

당연하지만 app.py는 이름을 바꿔서 실행해도 되며, 메인 코어 코드에서 templates와 static 폴더 역할을 하는 디렉토리를 다른 곳으로 지정할 수도 있습니다.

 

 

그럼 flask의 실제 사용에 대해 알아보겠습니다.
설치는 간단합니다. 파이썬이 설치되어 있다면, 명령어를 입력하는 콘솔에서 다음을 입력하면 됩니다.

pip install flask

 

위에서 알아본 3가지 기본 요소를 만들어주고, 간단한 app.py 코드를 작성해보겠습니다.

from flask import *

app = Flask(__name__)

if __name__ == '__main__':
    app.run('0.0.0.0', port=80, debug=True)
 

flask의 기본 코드입니다. flask 모듈을 불러오고, app이란 이름으로 flask 객체를 생성합니다.

마지막에 80번 포트(tcp)로 해서 디버그를 허용하는 상태로 실행한다는 의미를 담고 있습니다.

 

여기서 경로와 함수를 추가해주어서 기능을 만들어 갈 수 있습니다.

from flask import *

app = Flask(__name__)


@app.route('/')
def fun1():
    return 'hello world'


@app.route('/good')
def fun2():
    return 'good!'

if __name__ == '__main__':
    app.run('0.0.0.0', port=80, debug=True)
도메인에 접속하면 사용자의 브라우저 화면에 hello world라는 글자가 보일 겁니다.(말 그대로 글자만 보입니다. 별다르게 꾸며진 것 없습니다.)

도메인/good에 접속하면 good!이란 글자가 보일 겁니다.

자세하게 들여다보면 도메인으로 접속하면 fun1이란 함수가 실행되고, 함수의 결과가 사용자에게 반환되는 구조입니다.

다른 세부적인 기능들도 보겠습니다.

 

from flask import *

app = Flask(__name__)


@app.route('/')
def fun1():
    return 'hello world'


@app.route('/<string:p>')
def fun2(p):
    return f'hello {p}!'

if __name__ == '__main__':
    app.run('0.0.0.0', port=80, debug=True)
 

먼저 도메인으로 접근하면 마찬가지로 hello world가 반환될 겁니다.

주목해야 하는 건 두 번째 경로인데요.

도메인 경로에 있는 값을 p(string 타입)라는 변수에 담아서 이를 매개변수로 처리합니다.

그리고 p 변수의 값을 이용해 hello {p}를 반환합니다.

한편 도메인으로 접근하는 것은 두 번째 경로와 첫 번째 경로 둘 다 해당될 수 있습니다.

두 번째 경로에서 p가 '' 빈 문자열인 값으로 해석될 수 있기 때문이죠. flask에서는 더 간단하게 경로를 명시한 첫 번째 경로로 처리됩니다.

 

이제 벡앤드에서 라우팅을 어떻게 하는 지 알아보았으니 html을 전달해주는 과정을 보도록 합시다.

flask 모듈에서 render_template을 사용하면 됩니다.

우선 templates 폴더에 아무 html 파일이나 만들어줍니다.

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>welcome</title>
</head>
<body>
  <h1>hello, world</h1>
  <script>
       alert('hello, world!')
  </script>
</body>
</html>
 

 

아마 이 정도 간단한 html 코드는 다들 아실 겁니다.

이 html을 index.html이라고 하겠습니다.(고정된 것은 없습니다. 이름은 자유롭게 하시면 됩니다.)

이 html을 도메인/welcome이라는 경로로 접속하는 경우에 반환하도록 하겠습니다.

from flask import *

app = Flask(__name__)


@app.route('/')
def fun1():
    return 'hello world'


@app.route('/<string:p>')
def fun2(p):
    return f'hello {p}!'

@app.route('/welcome')
def fun3():
    return render_template('index.html')

if __name__ == '__main__':
    app.run('0.0.0.0', port=80, debug=True)
 

매우 간단합니다.

flask의 기능은 여기서 끝이 아닌데요. flask는 templates 디렉토리에 있는 html을 단순히 반환하는 것이 아닙니다. flask를 설치하면 같이 설치되는 jinja2라는 엔진이 html을 건드립니다. html 내에 특수한 표식이 있으면, jinja2가 그부분에 알맞는 값을 넣고, 최종적으로 html을 반환하는 겁니다. 만약 특수한 표식이 없는, index.html의 경우 변경된 것 없이 그대로 사용자에게 전달되겠죠?

이제 index.html을 변경해봅시다.

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>welcome</title>
</head>
<body>
  <h1>{{ inh1 }}</h1>
  <script>
       alert('{{ injs }}')
  </script>
</body>
</html>
 

jinja2가 인식하는 특수한 표식의 첫 번째는 {{}}입니다. jinja2 엔진은 {{ }} 표식을 인식하고, inh1이라는 이름과 injs라는 이름을 가진 변수의 값을 넣어줍니다. 물론 그 값이 존재하지 않으면 아무 값도 안 나올 겁니다. 주의할 점은 html 내에서 딱 {{ 변수 }} 부분만 값이 교체가 된다는 것입니다. 원래 파이썬 자료형이 무엇이었든, 그냥 텍스트로 들어간다는 점 때문에 script 태그 내에서는 사용에 주의를 기울여야 합니다.

그럼 jinja2에 특정 이름을 가진 값을 가진 변수를 어떻게 전달할까요?

render_template에 추가 인수를 넣어 전달할 수 있습니다.

from flask import *

app = Flask(__name__)


@app.route('/')
def fun1():
    return 'hello world'


@app.route('/<string:p>')
def fun2(p):
    return f'hello {p}!'

@app.route('/welcome')
def fun3():
    return render_template('index.html', inh1=True, injs='aa')

if __name__ == '__main__':
    app.run('0.0.0.0', port=80, debug=True)
 

이렇게 아무 종류의 값이나 넣어서 보낼 수 있습니다.

두 번째 jinja2가 인식하는 표식은 {% %}입니다. 이 구문은 처리 구문을 나타낼 때 사용한다고 보시면 됩니다.

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>welcome</title>
</head>
<body>

  {% if inh1 %}
  <h1>벡앤드에서 True랍니다</h1>
  {% else %}
  <h1>벡앤드에서 False랍니다</h1>
  {% endif %}

</body>
</html>
이렇게 {% %} 표식 안에 if나 for를 넣어 분기, 반복 구문을 만들 수 있습니다. 구문에 영향을 받는 엘리먼트의 마지막에는 반드시 {% endif %}나 {% endfor %}가 있어야 합니다. 위 html을 아까 flask 코드에서 실행시켜 본다면, if 바로 밑에 있는 h1이 출력될 것입니다.

 

 

간단하게 flask에 대해 알아보았습니다. flask를 더욱 심화적으로 알아가다 보면 이런 것도 내장되어 있다니!와 이런 것도 없다고?가 동시에 나옵니다. 지금은 보안 강의이니 더 깊이는 들어가지 않겠습니다. 이정도만 알고계셔도 앞으로 등장할 flask 코드는 전부 이해하실 수 있습니다. 다시 한 번 말씀드리자면 웹 보안 강의에 오신 것을 진심으로 환영합니다. 이 강의는 여러분에게 웹 보안의 중요성을 이해하고, 암호화 기술을 이해하는 데 필요한 핵심을 제공하고자 노력하였습니다. 처음 시작하는 것은 어려울 수 있지만, 계속해서 노력하고 배우면 반드시 좋은 코드와 서비스를 만드는 노하우를 기르실 수 있을 겁니다. 화이팅